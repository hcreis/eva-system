--liquibase formatted sql

--changeset helen:01
--comment: Create PART_TYPE table
CREATE TABLE PART_TYPE (
  PTYPE_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  PTYPE_DESCRIPTION VARCHAR(255) NOT NULL,
  PTYPE_NAME VARCHAR(255) NOT NULL,
  PART_NUMBER_QUESTIONS INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(PTYPE_ID),
  UNIQUE INDEX PTYPE_DESC_UNIQUE(PTYPE_NAME)
);

CREATE TABLE MEDIA_TYPE (
  MTYPE_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  MTYPE_DESCRIPTION VARCHAR(255) NOT NULL,
  PRIMARY KEY(MTYPE_ID)
);

CREATE TABLE TEST (
  TEST_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  TEST_LEVEL INTEGER UNSIGNED NOT NULL,
  TEST_SEMESTER INTEGER UNSIGNED NOT NULL,
  TEST_TIME_LIMIT INTEGER UNSIGNED NULL,
  PRIMARY KEY(TEST_ID),
  UNIQUE INDEX TEST_LEVEL_UNIQUE(TEST_LEVEL)
);

CREATE TABLE QUESTION_LEVEL (
  QLEVEL_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  QLEVEL_NUM INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(QLEVEL_ID)
);

CREATE TABLE ENGLISH_LEVEL (
  ELEVEL_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  ELEVEL_LEVEL INTEGER UNSIGNED NULL,
  PRIMARY KEY(ELEVEL_ID)
);

CREATE TABLE COURSE (
  COURSE_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  COURSE_NAME INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(COURSE_ID)
);

CREATE TABLE SECTION (
  SECTION_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  TEST_ID INTEGER UNSIGNED NOT NULL,
  SECTION_NAME VARCHAR(50) NOT NULL,
  SECTION_DESCRIPTION VARCHAR(255) NOT NULL,
  PRIMARY KEY(SECTION_ID),
  INDEX SECTION_FKIndex1(TEST_ID)
);

CREATE TABLE MEDIA (
  MEDIA_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  MTYPE_ID INTEGER UNSIGNED NOT NULL,
  MEDIA_PATH VARCHAR(255) NOT NULL,
  PRIMARY KEY(MEDIA_ID),
  INDEX MEDIA_FK_MTYPE_ID(MTYPE_ID)
);

CREATE TABLE PART (
  PART_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  PTYPE_ID INTEGER UNSIGNED NOT NULL,
  SECTION_ID INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(PART_ID),
  INDEX PART_PTYPE_ID(PTYPE_ID),
  INDEX PART_FK_SECTION_ID(SECTION_ID)
);

CREATE TABLE QUESTION (
  QUESTION_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  QLEVEL_ID INTEGER UNSIGNED NOT NULL,
  PART_ID INTEGER UNSIGNED NOT NULL,
  QUESTION_DESCRIPTION VARCHAR(255) NOT NULL,
  QUESTION_EXAMPLE BOOL NOT NULL,
  PRIMARY KEY(QUESTION_ID),
  INDEX QUESTION_FK_PART_ID(PART_ID),
  INDEX QUESTION_FKIndex3(QLEVEL_ID)
);

CREATE TABLE COURSE_ENGLISH (
  COURSE_ID INTEGER UNSIGNED NOT NULL,
  ENGLISH_LEVEL_ELEVEL_ID INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(COURSE_ID, ENGLISH_LEVEL_ELEVEL_ID),
  INDEX COURSE_ENGLISH_FK_COURSE_ID(COURSE_ID),
  INDEX COURSE_ENGLISH_FK_LEVEL_ID(ENGLISH_LEVEL_ELEVEL_ID)
);

CREATE TABLE ANSWARE (
  ANSWARE_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  QUESTION_ID INTEGER UNSIGNED NOT NULL,
  ANSWARE_DESCRIPTION VARCHAR(255) NOT NULL,
  CORRECT_ANSWARE BOOL NOT NULL,
  PRIMARY KEY(ANSWARE_ID),
  INDEX ANSWARE_FK_QUESTION_ID(QUESTION_ID)
);

CREATE TABLE STUDENT (
  STUDENT_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  COURSE_ENGLISH_ELEVEL_ID INTEGER UNSIGNED NOT NULL,
  COURSE_ENGLISH_COURSE_ID INTEGER UNSIGNED NOT NULL,
  STUDENT_RA VARCHAR(45) NOT NULL,
  STUDENT_NAME VARCHAR(255) NOT NULL,
  STUDENT_EMAIL VARCHAR(255) NULL,
  PRIMARY KEY(STUDENT_ID),
  INDEX STUDENT_FKIndex1(COURSE_ENGLISH_COURSE_ID, COURSE_ENGLISH_ELEVEL_ID)
);

CREATE TABLE QUESTION_MEDIA (
  QUESTION_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  MEDIA_ID INTEGER UNSIGNED NOT NULL,
  PRIMARY KEY(QUESTION_ID, MEDIA_ID),
  INDEX QUESTION_has_MEDIA_FKIndex1(QUESTION_ID),
  INDEX QUESTION_has_MEDIA_FKIndex2(MEDIA_ID)
);

CREATE TABLE EXECUTION (
  EXECUTION_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  STUDENT_ID INTEGER UNSIGNED NOT NULL,
  TEST_ID INTEGER UNSIGNED NOT NULL,
  TIME_START DATETIME NULL,
  TIME_FINISH DATETIME NULL,
  PRIMARY KEY(EXECUTION_ID),
  INDEX EXECUTION_FKIndex1(TEST_ID),
  INDEX EXECUTION_FKIndex2(STUDENT_ID)
);

CREATE TABLE EXEC_INFORMATION (
  ANSWARE_ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  QUESTION_ID INTEGER UNSIGNED NOT NULL,
  EXECUTION_ID INTEGER UNSIGNED NOT NULL,
  INDEX EXEC_INFORMATION_FKIndex1(EXECUTION_ID),
  INDEX EXEC_INFORMATION_FKIndex2(QUESTION_ID),
  INDEX EXEC_INFORMATION_FKIndex3(ANSWARE_ID)
);


